<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans" 
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:p="http://www.springframework.org/schema/p" 
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:jee="http://www.springframework.org/schema/jee" 
		xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:cache="http://www.springframework.org/schema/cache"
		xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
			http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd" >

	<context:property-placeholder location="classpath:config.properties,classpath:test.properties" />
	
	<aop:aspectj-autoproxy />
	<context:annotation-config />
	<!-- <cache:annotation-driven /> --> 
	
	<!-- 数据源配置  -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <property name="url" value="${jdbc.jdbcUrl}" />
	    <property name="username" value="${jdbc.user}" />
	    <property name="password" value="${jdbc.password}" />
	    <property name="filters" value="stat" />
	    <property name="maxActive" value="${jdbc.maxActive}" />
	    <property name="initialSize" value="${jdbc.initialSize}" />
	    <property name="maxWait" value="${jdbc.maxWait}" />
	    <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
	    <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
	    <property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	    <property name="connectionProperties" value="config.decrypt=true" />
	</bean>
	
	
    <!-- Hibernate  -->
    <bean id="sessionFactory"
        class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan">
           <list>
				<value>com.plateno.o2omember.*.model*</value>
				<value>com.plateno.o2omember.*.model.*</value>
				<value>com.plateno.o2omember.*.model*.*</value>
				<value>com.plateno.o2omember.webapi.entity*</value>
				<value>com.plateno.o2omember.webapi.entity.*</value>
				<value>com.plateno.o2omember.webapi.entity*.*</value>
			</list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <prop key="hibernate.show_sql">true</prop>
            </props>
        </property>
    </bean>
	 
    <!-- 事务管理配置   -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="transactionManager"
        class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
	
	<!-- 注册缓存 
  	<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
	  <property name="caches">
	    <set>
	       <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" name="navigation_cache"/>
	       <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" name="querys"/>
	    </set> 
	  </property> 
	</bean>
	-->
	
	<!-- redis 配置 -->
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" >
	    <property name="usePool" value="true" />
        <property name="hostName" value="${redis.host}" />
        <property name="port" value="${redis.port}" />
        <property name="password" value="${redis.pass}" />
        <property name="timeout" value="${redis.timeout}" />
        <property name="database" value="${redis.default.db}"/>
        <constructor-arg index="0" ref="jedisPoolConfig" />
	</bean>
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
	    
		<property name="testWhileIdle" value="true" />
		<property name="minIdle" value="${redis.minIdle}" />
		<property name="maxIdle" value="${redis.maxIdle}" />
		<property name="maxTotal" value="${redis.maxTotal}" /> 
		<property name="maxWaitMillis" value="${redis.maxWaitMillis}" /> 
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="true" />
        
	</bean>

	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate" p:connection-factory-ref="jedisConnectionFactory" />
	
	<bean id="freemarkerClassTemplateLoader" class="com.plateno.o2omember.core.utilites.FreemarkerClassTemplateLoader" ></bean>
	
	<!-- ws 会员服务实现  --> 
	<bean id="iMemberWebService" class="com.plateno.o2omember.webapi.webservice.MemberWebServiceTest" />
	
	<!-- ws 登录服务实现  -->
	<bean id="loginWebService" class="com.plateno.o2omember.webapi.webservice.LoginWebService" />
	
	<!-- ws client  -->
	<import resource="applicationContext-plateno-ws.xml"/>
	
</beans>
